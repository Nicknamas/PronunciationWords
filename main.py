from gtts import gTTS
import pygame
import io
import time
import os
import tempfile
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed
import json
import pickle
import hashlib
import random  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç random

class SettingsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    def __init__(self, settings_file='tts_settings.json'):
        self.settings_file = settings_file
        self.default_settings = {
            'pause_duration': 0.3,
            'speed_factor': 1.2,
            'language': 'ru',
            'generation_mode': 1,  # 1-–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π, 2-–±–∞—Ç—á–∏, 3-–∞–≤—Ç–æ
            'max_workers': 4,
            'batch_size': 3,
            'random_order': True  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        }
        self.settings = self.load_settings()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.settings_file):
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    saved_settings = json.load(f)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                settings = {**self.default_settings, **saved_settings}
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return settings
            else:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return self.default_settings.copy()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return self.default_settings.copy()
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, indent=2, ensure_ascii=False)
            print("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def get(self, key):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return self.settings.get(key, self.default_settings.get(key))
    
    def set(self, key, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings[key] = value
    
    def print_current_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("\nüìä –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"   ‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏: {self.settings['pause_duration']}—Å")
        print(f"   üéØ –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è: {self.settings['speed_factor']}x")
        print(f"   üåê –Ø–∑—ã–∫: {self.settings['language']}")
        print(f"   üîß –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {self.get_mode_name()}")
        print(f"   üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: {'–í–ö–õ' if self.settings['random_order'] else '–í–´–ö–õ'}")
        
        if self.settings['generation_mode'] == 1:
            print(f"   üöÄ –ü–æ—Ç–æ–∫–æ–≤: {self.settings['max_workers']}")
        elif self.settings['generation_mode'] == 2:
            print(f"   üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.settings['batch_size']}")
    
    def get_mode_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        modes = {
            1: "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π",
            2: "–ë–∞—Ç—á–∞–º–∏", 
            3: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
        }
        return modes.get(self.settings['generation_mode'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

class AudioCache:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    def __init__(self, cache_file='audio_cache.pkl'):
        self.cache_file = cache_file
        self.cache = self.load_cache()
    
    def get_cache_key(self, word, language='ru', slow=False):
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        content = f"{word}_{language}_{slow}"
        return hashlib.md5(content.encode('utf-8')).hexdigest()
    
    def load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'rb') as f:
                    cache = pickle.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {len(cache)} –∑–∞–ø–∏—Å–µ–π")
                return cache
            else:
                print("‚úÖ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫—ç—à")
            return {}
    
    def save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.cache_file, 'wb') as f:
                pickle.dump(self.cache, f)
            print(f"üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(self.cache)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def get(self, word, language='ru', slow=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –∫—ç—à–∞"""
        key = self.get_cache_key(word, language, slow)
        if key in self.cache:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π BytesIO –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cached_data = self.cache[key]
            audio_buffer = io.BytesIO()
            audio_buffer.write(cached_data)
            audio_buffer.seek(0)
            return audio_buffer
        return None
    
    def put(self, word, audio_buffer, language='ru', slow=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤ –∫—ç—à"""
        try:
            key = self.get_cache_key(word, language, slow)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ BytesIO –æ–±—ä–µ–∫—Ç–∞
            audio_data = audio_buffer.getvalue()
            self.cache[key] = audio_data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à: {e}")

def read_words_from_file(filename):
    """–ß–∏—Ç–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫"""
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            words = [line.strip() for line in file if line.strip()]
        return words
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return []

def generate_single_audio(word, language='ru', slow=False, cache=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    if cache:
        cached_audio = cache.get(word, language, slow)
        if cached_audio:
            return cached_audio, word, True, True  # True - –∏–∑ –∫—ç—à–∞
    
    try:
        tts = gTTS(text=word, lang=language, slow=slow)
        audio_buffer = io.BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if cache:
            cache.put(word, audio_buffer, language, slow)
        
        return audio_buffer, word, True, False  # False - –Ω–µ –∏–∑ –∫—ç—à–∞
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è '{word}': {e}")
        return None, word, False, False

def generate_audio_parallel(words, language='ru', speed_factor=1.0, max_workers=5, cache=None):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {len(words)} —Å–ª–æ–≤...")
    print(f"üìä –ü–æ—Ç–æ–∫–æ–≤: {max_workers}, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_factor}x")
    
    audio_data = [None] * len(words)
    slow_mode = speed_factor < 0.8
    cache_hits = 0
    total_words = len(words)
    
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_index = {
            executor.submit(generate_single_audio, word, language, slow_mode, cache): i 
            for i, word in enumerate(words)
        }
        
        completed = 0
        for future in as_completed(future_to_index):
            i = future_to_index[future]
            try:
                audio_buffer, word, success, from_cache = future.result()
                if success:
                    audio_data[i] = audio_buffer
                    completed += 1
                    cache_status = "‚úì –ö–≠–®" if from_cache else "‚úì –ì–ï–ù–ï–†–ê–¶–ò–Ø"
                    cache_hits += 1 if from_cache else 0
                    print(f"{cache_status}: {word} ({completed}/{total_words})")
                else:
                    print(f"‚úó –û–®–ò–ë–ö–ê: {word}")
            except Exception as e:
                print(f"‚úó –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {words[i]} - {e}")
    
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {cache_hits} –∏–∑ –∫—ç—à–∞, {total_words - cache_hits} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    return audio_data

def generate_audio_batch(words, language='ru', speed_factor=1.0, batch_size=3, cache=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –±–∞—Ç—á–∞–º–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"üîÑ –ë–∞—Ç—á-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {len(words)} —Å–ª–æ–≤...")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_factor}x")
    
    audio_data = []
    slow_mode = speed_factor < 0.8
    total_batches = (len(words) + batch_size - 1) // batch_size
    cache_hits = 0
    
    for batch_num in range(total_batches):
        start_idx = batch_num * batch_size
        end_idx = min((batch_num + 1) * batch_size, len(words))
        batch_words = words[start_idx:end_idx]
        
        print(f"üì¶ –ë–∞—Ç—á {batch_num + 1}/{total_batches}: {', '.join(batch_words)}")
        
        threads = []
        batch_results = [None] * len(batch_words)
        batch_cache_stats = [False] * len(batch_words)
        
        def generate_batch_word(idx, word):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache:
                cached_audio = cache.get(word, language, slow_mode)
                if cached_audio:
                    batch_results[idx] = cached_audio
                    batch_cache_stats[idx] = True
                    return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
            try:
                tts = gTTS(text=word, lang=language, slow=slow_mode)
                audio_buffer = io.BytesIO()
                tts.write_to_fp(audio_buffer)
                audio_buffer.seek(0)
                batch_results[idx] = audio_buffer
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                if cache:
                    cache.put(word, audio_buffer, language, slow_mode)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{word}': {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –±–∞—Ç—á–∞
        for i, word in enumerate(batch_words):
            thread = threading.Thread(target=generate_batch_word, args=(i, word))
            threads.append(thread)
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for thread in threads:
            thread.join()
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à
        batch_cache_hits = sum(batch_cache_stats)
        cache_hits += batch_cache_hits
        print(f"   üìä –ë–∞—Ç—á {batch_num + 1}: {batch_cache_hits}/{len(batch_words)} –∏–∑ –∫—ç—à–∞")
        
        audio_data.extend(batch_results)
    
    print(f"üìà –ò—Ç–æ–≥: {cache_hits} –∏–∑ –∫—ç—à–∞, {len(words) - cache_hits} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    return audio_data

def play_words_optimized(audio_data, words, pause_duration=0.3, playback_speed=1.0, random_order=True):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    pygame.mixer.init(frequency=44100, size=-16, channels=2, buffer=512)
    pygame.mixer.set_num_channels(3)
    
    print(f"üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {len(words)} —Å–ª–æ–≤...")
    print(f"‚è±Ô∏è –ü–∞—É–∑–∞: {pause_duration}—Å, —Å–∫–æ—Ä–æ—Å—Ç—å: {playback_speed}x")
    print(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: {'–í–ö–õ' if random_order else '–í–´–ö–õ'}")
    print("-" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if random_order:
        # –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        playback_indices = list(range(len(words)))
        random.shuffle(playback_indices)
        print("üîÄ –°–ª–æ–≤–∞ –±—É–¥—É—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        playback_indices = list(range(len(words)))
        print("‚û°Ô∏è –°–ª–æ–≤–∞ –±—É–¥—É—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã –≤ –æ–±—ã—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
    
    temp_dir = tempfile.mkdtemp()
    
    try:
        start_time = time.time()
        
        for play_index, original_index in enumerate(playback_indices, 1):
            word = words[original_index]
            audio_buffer = audio_data[original_index]
            
            if audio_buffer is None:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ {play_index}/{len(words)}: {word}")
                continue
                
            print(f"{play_index}/{len(words)}: {word}")
            
            try:
                audio_buffer.seek(0)
                temp_filename = os.path.join(temp_dir, f"word_{original_index}.mp3")
                
                with open(temp_filename, 'wb') as f:
                    f.write(audio_buffer.getvalue())
                
                sound = pygame.mixer.Sound(temp_filename)
                channel = sound.play()
                
                while channel.get_busy():
                    pygame.time.wait(5)
                
                if play_index < len(words):
                    time.sleep(pause_duration)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è '{word}': {e}")
        
        total_time = time.time() - start_time
        print("-" * 60)
        print(f"‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            for file in os.listdir(temp_dir):
                os.remove(os.path.join(temp_dir, file))
            os.rmdir(temp_dir)
        except:
            pass

def get_user_settings(settings_manager):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ"""
    settings_manager.print_current_settings()
    
    print("\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø:")
    print("1 - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("2 - –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("3 - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ, –Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—É–∑—É/—Å–∫–æ—Ä–æ—Å—Ç—å/–ø–æ—Ä—è–¥–æ–∫")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): ").strip()
    
    if choice == "1":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return
    
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if choice == "3":
        print("üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—É–∑—ã, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–æ—Ä—è–¥–∫–∞:")
    
    if choice != "3":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—É–∑—ã
        print("\n‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏:")
        print("   0.0 - –ë–µ–∑ –ø–∞—É–∑—ã")
        print("   0.1 - –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è")
        print("   0.3 - –ö–æ—Ä–æ—Ç–∫–∞—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("   0.5 - –°—Ä–µ–¥–Ω—è—è")
        print("   1.0 - –î–ª–∏–Ω–Ω–∞—è")
    
    pause_input = input(f"–ü–∞—É–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö [—Ç–µ–∫—É—â–∞—è: {settings_manager.get('pause_duration')}]: ").strip()
    if pause_input:
        settings_manager.set('pause_duration', float(pause_input))
    
    if choice != "3":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        print("\nüéØ –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è:")
        print("   0.7 - –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ")
        print("   0.9 - –ú–µ–¥–ª–µ–Ω–Ω–æ")
        print("   1.0 - –ù–æ—Ä–º–∞–ª—å–Ω–∞—è")
        print("   1.2 - –ë—ã—Å—Ç—Ä–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("   1.5 - –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ")
    
    speed_input = input(f"–°–∫–æ—Ä–æ—Å—Ç—å 0.5-2.0 [—Ç–µ–∫—É—â–∞—è: {settings_manager.get('speed_factor')}]: ").strip()
    if speed_input:
        speed = float(speed_input)
        if 0.5 <= speed <= 2.0:
            settings_manager.set('speed_factor', speed)
        else:
            print("‚ùå –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.5 –¥–æ 2.0, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    print("\nüé≤ –ü–æ—Ä—è–¥–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:")
    print("   1 - –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è)")
    print("   2 - –û–±—ã—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–∫–∞–∫ –≤ —Ñ–∞–π–ª–µ)")
    
    order_input = input(f"–ü–æ—Ä—è–¥–æ–∫ [—Ç–µ–∫—É—â–∏–π: {'1' if settings_manager.get('random_order') else '2'}]: ").strip()
    if order_input:
        settings_manager.set('random_order', order_input == "1")
    
    if choice != "3":
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("\nüéõÔ∏è –†–ï–ñ–ò–ú –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print("1 - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π (—Å–∫–æ—Ä–æ—Å—Ç—å)")
        print("2 - –ë–∞—Ç—á–∞–º–∏ (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)")
        print("3 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π")
        
        mode_input = input(f"–†–µ–∂–∏–º [—Ç–µ–∫—É—â–∏–π: {settings_manager.get('generation_mode')}]: ").strip()
        if mode_input:
            settings_manager.set('generation_mode', int(mode_input))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if settings_manager.get('generation_mode') == 1:
            workers_input = input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ [—Ç–µ–∫—É—â–µ–µ: {settings_manager.get('max_workers')}]: ").strip()
            if workers_input:
                settings_manager.set('max_workers', int(workers_input))
        elif settings_manager.get('generation_mode') == 2:
            batch_input = input(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ [—Ç–µ–∫—É—â–∏–π: {settings_manager.get('batch_size')}]: ").strip()
            if batch_input:
                settings_manager.set('batch_size', int(batch_input))

def get_optimization_settings(word_count, settings_manager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    if word_count <= 5:
        return settings_manager.get('max_workers'), settings_manager.get('batch_size')
    elif word_count <= 15:
        return min(4, settings_manager.get('max_workers')), min(3, settings_manager.get('batch_size'))
    else:
        return settings_manager.get('max_workers'), settings_manager.get('batch_size')

def main_optimized_with_cache_and_settings():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    settings_manager = SettingsManager()
    cache = AudioCache()
    
    filename = "listen.txt"
    
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª listen.txt —Å–æ —Å–ª–æ–≤–∞–º–∏ (–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)")
        return
    
    words = read_words_from_file(filename)
    if not words:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞")
        return
    
    print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤")
    print("üìù –°–ª–æ–≤–∞:", ", ".join(words[:10]) + ("..." if len(words) > 10 else ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_settings(settings_manager)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_manager.print_current_settings()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
    gen_start = time.time()
    
    generation_mode = settings_manager.get('generation_mode')
    speed_factor = settings_manager.get('speed_factor')
    language = settings_manager.get('language')

    if generation_mode == 1:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        max_workers, _ = get_optimization_settings(len(words), settings_manager)
        audio_data = generate_audio_parallel(
            words, 
            speed_factor=speed_factor, 
            max_workers=max_workers, 
            language=language,
            cache=cache
        )
    elif generation_mode == 2:
        # –ë–∞—Ç—á-—Ä–µ–∂–∏–º
        _, batch_size = get_optimization_settings(len(words), settings_manager)
        audio_data = generate_audio_batch(
            words, 
            speed_factor=speed_factor, 
            batch_size=batch_size, 
            language=language,
            cache=cache
        )
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
        max_workers, batch_size = get_optimization_settings(len(words), settings_manager)
        if len(words) > 10:
            print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
            audio_data = generate_audio_parallel(
                words, 
                speed_factor=speed_factor, 
                max_workers=max_workers, 
                language=language,
                cache=cache
            )
        else:
            print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –±–∞—Ç—á-—Ä–µ–∂–∏–º")
            audio_data = generate_audio_batch(
                words, 
                speed_factor=speed_factor, 
                language=language,
                batch_size=batch_size, 
                cache=cache
            )
    
    gen_time = time.time() - gen_start
    print(f"‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {gen_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫—ç—à
    settings_manager.save_settings()
    cache.save_cache()
    
    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    try:
        play_words_optimized(
            audio_data, 
            words, 
            settings_manager.get('pause_duration'), 
            settings_manager.get('speed_factor'),
            settings_manager.get('random_order')  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        )
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {e}")
    finally:
        # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫—ç—à –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        settings_manager.save_settings()
        cache.save_cache()

def clear_all_data():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    cache_files = ['audio_cache.pkl']
    for cache_file in cache_files:
        if os.path.exists(cache_file):
            os.remove(cache_file)
            print(f"üßπ –ö—ç—à {cache_file} –æ—á–∏—â–µ–Ω")
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_file = 'tts_settings.json'
    if os.path.exists(settings_file):
        os.remove(settings_file)
        print(f"üßπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {settings_file} –æ—á–∏—â–µ–Ω—ã")

def show_settings_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_manager = SettingsManager()
    settings_manager.print_current_settings()

if __name__ == "__main__":
    print("üöÄ –£–°–ö–û–†–ï–ù–ù–û–ï –ê–£–î–ò–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –ù–ê–°–¢–†–û–ï–ö")
    print("=" * 65)
    
    print("\nüéÆ –†–ï–ñ–ò–ú–´:")
    print("1 - –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º (—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)")
    print("2 - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    print("3 - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print("4 - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—ç—à + –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
    print("5 - –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-5): ").strip()
    
    if choice == "2":
        # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_manager = SettingsManager()
        cache = AudioCache()
        words = read_words_from_file("listen.txt")
        if words:
            print("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
            settings_manager.print_current_settings()
            
            audio_data = generate_audio_parallel(
                words, 
                speed_factor=settings_manager.get('speed_factor'), 
                max_workers=settings_manager.get('max_workers'), 
                language=settings_manager.get('language'),
                cache=cache
            )
            play_words_optimized(
                audio_data, 
                words, 
                settings_manager.get('pause_duration'), 
                settings_manager.get('speed_factor'),
                settings_manager.get('random_order')  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            )
            settings_manager.save_settings()
            cache.save_cache()
    elif choice == "3":
        show_settings_info()
    elif choice == "4":
        clear_all_data()
    elif choice == "5":
        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        words = read_words_from_file("listen.txt")
        if words:
            settings_manager = SettingsManager()
            cache = AudioCache()
            start = time.time()
            generate_audio_parallel(words, cache=cache)
            print(f"‚è±Ô∏è –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏: {time.time() - start:.1f}—Å")
            settings_manager.save_settings()
            cache.save_cache()
    else:
        main_optimized_with_cache_and_settings()
