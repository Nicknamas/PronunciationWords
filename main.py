from gtts import gTTS
import pygame
import io
import time
import os
import tempfile
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed
import json
import pickle
import hashlib

class AudioCache:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    def __init__(self, cache_file='audio_cache.pkl'):
        self.cache_file = cache_file
        self.cache = self.load_cache()
    
    def get_cache_key(self, word, language='ru', slow=False):
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        content = f"{word}_{language}_{slow}"
        return hashlib.md5(content.encode('utf-8')).hexdigest()
    
    def load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'rb') as f:
                    cache = pickle.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {len(cache)} –∑–∞–ø–∏—Å–µ–π")
                return cache
            else:
                print("‚úÖ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫—ç—à")
            return {}
    
    def save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.cache_file, 'wb') as f:
                pickle.dump(self.cache, f)
            print(f"üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(self.cache)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def get(self, word, language='ru', slow=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –∫—ç—à–∞"""
        key = self.get_cache_key(word, language, slow)
        if key in self.cache:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π BytesIO –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cached_data = self.cache[key]
            audio_buffer = io.BytesIO()
            audio_buffer.write(cached_data)
            audio_buffer.seek(0)
            return audio_buffer
        return None
    
    def put(self, word, audio_buffer, language='ru', slow=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤ –∫—ç—à"""
        try:
            key = self.get_cache_key(word, language, slow)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ BytesIO –æ–±—ä–µ–∫—Ç–∞
            audio_data = audio_buffer.getvalue()
            self.cache[key] = audio_data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à: {e}")

def read_words_from_file(filename):
    """–ß–∏—Ç–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫"""
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            words = [line.strip() for line in file if line.strip()]
        return words
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return []

def generate_single_audio(word, language='ru', slow=False, cache=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    if cache:
        cached_audio = cache.get(word, language, slow)
        if cached_audio:
            return cached_audio, word, True, True  # True - –∏–∑ –∫—ç—à–∞
    
    try:
        tts = gTTS(text=word, lang=language, slow=slow)
        audio_buffer = io.BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if cache:
            cache.put(word, audio_buffer, language, slow)
        
        return audio_buffer, word, True, False  # False - –Ω–µ –∏–∑ –∫—ç—à–∞
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è '{word}': {e}")
        return None, word, False, False

def generate_audio_parallel(words, language='ru', speed_factor=1.0, max_workers=5, cache=None):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {len(words)} —Å–ª–æ–≤...")
    print(f"üìä –ü–æ—Ç–æ–∫–æ–≤: {max_workers}, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_factor}x")
    
    audio_data = [None] * len(words)
    slow_mode = speed_factor < 0.8
    cache_hits = 0
    total_words = len(words)
    
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_index = {
            executor.submit(generate_single_audio, word, language, slow_mode, cache): i 
            for i, word in enumerate(words)
        }
        
        completed = 0
        for future in as_completed(future_to_index):
            i = future_to_index[future]
            try:
                audio_buffer, word, success, from_cache = future.result()
                if success:
                    audio_data[i] = audio_buffer
                    completed += 1
                    cache_status = "‚úì –ö–≠–®" if from_cache else "‚úì –ì–ï–ù–ï–†–ê–¶–ò–Ø"
                    cache_hits += 1 if from_cache else 0
                    print(f"{cache_status}: {word} ({completed}/{total_words})")
                else:
                    print(f"‚úó –û–®–ò–ë–ö–ê: {word}")
            except Exception as e:
                print(f"‚úó –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {words[i]} - {e}")
    
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {cache_hits} –∏–∑ –∫—ç—à–∞, {total_words - cache_hits} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    return audio_data

def generate_audio_batch(words, language='ru', speed_factor=1.0, batch_size=3, cache=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –±–∞—Ç—á–∞–º–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"üîÑ –ë–∞—Ç—á-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {len(words)} —Å–ª–æ–≤...")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_factor}x")
    
    audio_data = []
    slow_mode = speed_factor < 0.8
    total_batches = (len(words) + batch_size - 1) // batch_size
    cache_hits = 0
    
    for batch_num in range(total_batches):
        start_idx = batch_num * batch_size
        end_idx = min((batch_num + 1) * batch_size, len(words))
        batch_words = words[start_idx:end_idx]
        
        print(f"üì¶ –ë–∞—Ç—á {batch_num + 1}/{total_batches}: {', '.join(batch_words)}")
        
        threads = []
        batch_results = [None] * len(batch_words)
        batch_cache_stats = [False] * len(batch_words)
        
        def generate_batch_word(idx, word):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache:
                cached_audio = cache.get(word, language, slow_mode)
                if cached_audio:
                    batch_results[idx] = cached_audio
                    batch_cache_stats[idx] = True
                    return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
            try:
                tts = gTTS(text=word, lang=language, slow=slow_mode)
                audio_buffer = io.BytesIO()
                tts.write_to_fp(audio_buffer)
                audio_buffer.seek(0)
                batch_results[idx] = audio_buffer
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                if cache:
                    cache.put(word, audio_buffer, language, slow_mode)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ '{word}': {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –±–∞—Ç—á–∞
        for i, word in enumerate(batch_words):
            thread = threading.Thread(target=generate_batch_word, args=(i, word))
            threads.append(thread)
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for thread in threads:
            thread.join()
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à
        batch_cache_hits = sum(batch_cache_stats)
        cache_hits += batch_cache_hits
        print(f"   üìä –ë–∞—Ç—á {batch_num + 1}: {batch_cache_hits}/{len(batch_words)} –∏–∑ –∫—ç—à–∞")
        
        audio_data.extend(batch_results)
    
    print(f"üìà –ò—Ç–æ–≥: {cache_hits} –∏–∑ –∫—ç—à–∞, {len(words) - cache_hits} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    return audio_data

def play_words_optimized(audio_data, words, pause_duration=0.3, playback_speed=1.0):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    pygame.mixer.init(frequency=44100, size=-16, channels=2, buffer=512)
    pygame.mixer.set_num_channels(3)
    
    print(f"üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ {len(words)} —Å–ª–æ–≤...")
    print(f"‚è±Ô∏è –ü–∞—É–∑–∞: {pause_duration}—Å, —Å–∫–æ—Ä–æ—Å—Ç—å: {playback_speed}x")
    print("-" * 60)
    
    temp_dir = tempfile.mkdtemp()
    
    try:
        start_time = time.time()
        
        for i, (audio_buffer, word) in enumerate(zip(audio_data, words), 1):
            if audio_buffer is None:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ {i}/{len(words)}: {word}")
                continue
                
            print(f"{i}/{len(words)}: {word}")
            
            try:
                audio_buffer.seek(0)
                temp_filename = os.path.join(temp_dir, f"word_{i}.mp3")
                
                with open(temp_filename, 'wb') as f:
                    f.write(audio_buffer.getvalue())
                
                sound = pygame.mixer.Sound(temp_filename)
                channel = sound.play()
                
                while channel.get_busy():
                    pygame.time.wait(5)
                
                if i < len(words):
                    time.sleep(pause_duration)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è '{word}': {e}")
        
        total_time = time.time() - start_time
        print("-" * 60)
        print(f"‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            for file in os.listdir(temp_dir):
                os.remove(os.path.join(temp_dir, file))
            os.rmdir(temp_dir)
        except:
            pass

def get_generation_mode():
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("\nüéõÔ∏è –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print("1. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤)")
    print("2. –ë–∞—Ç—á–∞–º–∏ (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º)")
    print("3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä")
    
    while True:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        if choice in ['1', '2', '3']:
            return int(choice)
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")

def get_optimization_settings(word_count):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    if word_count <= 5:
        return 2, 2  # –ú–∞–ª–æ —Å–ª–æ–≤ - –º–∞–ª–æ –ø–æ—Ç–æ–∫–æ–≤/–±–∞—Ç—á–µ–π
    elif word_count <= 15:
        return 4, 3  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    else:
        return 6, 4  # –ú–Ω–æ–≥–æ —Å–ª–æ–≤

def main_optimized_with_cache():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
    cache = AudioCache()
    
    filename = "listen.txt"
    
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª listen.txt —Å–æ —Å–ª–æ–≤–∞–º–∏ (–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)")
        return
    
    words = read_words_from_file(filename)
    if not words:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞")
        return
    
    print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤")
    print("üìù –°–ª–æ–≤–∞:", ", ".join(words[:10]) + ("..." if len(words) > 10 else ""))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    print("\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø:")
    
    pause_input = input("‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.2): ").strip()
    pause_duration = float(pause_input) if pause_input else 0.2
    
    speed_input = input("üéØ –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è 0.5-2.0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.2): ").strip()
    speed_factor = float(speed_input) if speed_input else 1.2
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generation_mode = get_generation_mode()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
    gen_start = time.time()
    
    if generation_mode == 1:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        max_workers, _ = get_optimization_settings(len(words))
        audio_data = generate_audio_parallel(
            words, speed_factor=speed_factor, max_workers=max_workers, cache=cache
        )
    elif generation_mode == 2:
        # –ë–∞—Ç—á-—Ä–µ–∂–∏–º
        _, batch_size = get_optimization_settings(len(words))
        audio_data = generate_audio_batch(
            words, speed_factor=speed_factor, batch_size=batch_size, cache=cache
        )
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
        max_workers, batch_size = get_optimization_settings(len(words))
        if len(words) > 10:
            print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
            audio_data = generate_audio_parallel(
                words, speed_factor=speed_factor, max_workers=max_workers, cache=cache
            )
        else:
            print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –±–∞—Ç—á-—Ä–µ–∂–∏–º")
            audio_data = generate_audio_batch(
                words, speed_factor=speed_factor, batch_size=batch_size, cache=cache
            )
    
    gen_time = time.time() - gen_start
    print(f"‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {gen_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
    cache.save_cache()
    
    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    try:
        play_words_optimized(audio_data, words, pause_duration, speed_factor)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {e}")
    finally:
        # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        cache.save_cache()

def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    cache_files = ['audio_cache.pkl']
    for cache_file in cache_files:
        if os.path.exists(cache_file):
            os.remove(cache_file)
            print(f"üßπ –ö—ç—à {cache_file} –æ—á–∏—â–µ–Ω")

def show_cache_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ"""
    cache = AudioCache()
    print(f"üìä –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(cache.cache)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤ –≤ –∫—ç—à–µ (–ø–µ—Ä–≤—ã–µ 5)
    sample_words = list(cache.cache.keys())[:5]
    print("üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ:", sample_words)

if __name__ == "__main__":
    print("üöÄ –£–°–ö–û–†–ï–ù–ù–û–ï –ê–£–î–ò–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï–ú")
    print("=" * 55)
    
    print("\nüéÆ –†–ï–ñ–ò–ú–´:")
    print("1 - –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    print("2 - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (–ø–∞—É–∑–∞ 0.1—Å, —Å–∫–æ—Ä–æ—Å—Ç—å 1.3x)")
    print("3 - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞")
    print("4 - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ")
    print("5 - –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-5): ").strip()
    
    if choice == "2":
        # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
        cache = AudioCache()
        words = read_words_from_file("listen.txt")
        if words:
            print(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ {len(words)} —Å–ª–æ–≤")
            audio_data = generate_audio_parallel(words, speed_factor=1.3, max_workers=4, cache=cache)
            play_words_optimized(audio_data, words, pause_duration=0.1, playback_speed=1.3)
            cache.save_cache()
    elif choice == "3":
        clear_cache()
    elif choice == "4":
        show_cache_info()
    elif choice == "5":
        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        words = read_words_from_file("listen.txt")
        if words:
            cache = AudioCache()
            start = time.time()
            generate_audio_parallel(words, cache=cache)
            print(f"‚è±Ô∏è –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏: {time.time() - start:.1f}—Å")
            cache.save_cache()
    else:
        main_optimized_with_cache()
